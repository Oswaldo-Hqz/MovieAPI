// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAPI.Data;

#nullable disable

namespace MovieAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230406194321_userSeeds")]
    partial class userSeeds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("CategoryMovie");
                });

            modelBuilder.Entity("MovieAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MovieAPI.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Synopsis")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieAPI.Models.MovieRating", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MoviesRating");
                });

            modelBuilder.Entity("MovieAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 43, 20, 648, DateTimeKind.Utc).AddTicks(4189),
                            CreatedUserId = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 43, 20, 648, DateTimeKind.Utc).AddTicks(4193),
                            CreatedUserId = 1,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("MovieAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 43, 20, 648, DateTimeKind.Utc).AddTicks(4626),
                            Email = "admin@ravn.com",
                            FirstName = "El",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 38, 201, 73, 111, 143, 38, 8, 81, 152, 227, 225, 249, 142, 160, 74, 224, 53, 167, 36, 160, 220, 81, 76, 99, 187, 43, 36, 232, 238, 67, 167, 13, 45, 247, 105, 186, 149, 246, 201, 251, 111, 165, 24, 207, 96, 173, 144, 234, 230, 62, 149, 172, 8, 193, 139, 169, 164, 255, 41, 166, 90, 206, 252, 42 },
                            PasswordSalt = new byte[] { 10, 55, 174, 159, 174, 50, 150, 118, 94, 201, 191, 241, 189, 63, 168, 191, 250, 110, 121, 148, 136, 142, 126, 76, 143, 221, 93, 81, 46, 83, 168, 251, 194, 84, 29, 149, 188, 133, 169, 17, 243, 118, 148, 241, 181, 119, 53, 6, 106, 141, 80, 18, 207, 215, 133, 132, 156, 156, 49, 213, 12, 239, 58, 237, 171, 31, 243, 81, 233, 104, 46, 87, 21, 46, 12, 117, 143, 58, 212, 229, 212, 7, 146, 215, 195, 181, 115, 223, 34, 16, 147, 237, 30, 222, 42, 11, 239, 25, 223, 139, 127, 6, 53, 183, 61, 89, 250, 139, 74, 94, 97, 30, 56, 132, 116, 4, 109, 70, 228, 169, 216, 78, 190, 172, 108, 178, 213, 210 },
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 43, 20, 648, DateTimeKind.Utc).AddTicks(4676),
                            Email = "userDavid@ravn.com",
                            FirstName = "David",
                            LastName = "Peres",
                            PasswordHash = new byte[] { 203, 54, 179, 215, 99, 46, 240, 243, 186, 245, 13, 227, 232, 4, 76, 123, 241, 194, 107, 112, 208, 229, 205, 39, 92, 3, 249, 180, 211, 108, 66, 146, 74, 43, 38, 208, 75, 220, 84, 54, 185, 230, 15, 101, 217, 153, 27, 132, 253, 127, 221, 65, 102, 158, 27, 133, 78, 166, 66, 68, 247, 133, 111, 161 },
                            PasswordSalt = new byte[] { 205, 103, 239, 62, 218, 231, 131, 19, 141, 220, 94, 223, 76, 238, 224, 87, 218, 217, 177, 191, 25, 179, 83, 115, 229, 121, 15, 199, 210, 47, 137, 113, 67, 195, 208, 47, 52, 189, 228, 76, 22, 121, 92, 124, 254, 143, 252, 136, 34, 244, 79, 148, 138, 159, 12, 0, 203, 26, 218, 10, 202, 87, 235, 67, 12, 218, 199, 184, 100, 233, 117, 81, 66, 158, 137, 43, 246, 70, 213, 74, 138, 182, 87, 26, 21, 126, 14, 90, 120, 124, 17, 21, 68, 90, 187, 35, 255, 180, 100, 96, 219, 250, 117, 8, 16, 166, 230, 121, 3, 148, 133, 76, 196, 238, 109, 32, 61, 120, 123, 36, 144, 35, 135, 172, 83, 47, 217, 229 },
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.HasOne("MovieAPI.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAPI.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieAPI.Models.MovieRating", b =>
                {
                    b.HasOne("MovieAPI.Models.Movie", "Movie")
                        .WithMany("MoviesRatings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAPI.Models.User", "User")
                        .WithMany("MoviesRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Models.User", b =>
                {
                    b.HasOne("MovieAPI.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MovieAPI.Models.Movie", b =>
                {
                    b.Navigation("MoviesRatings");
                });

            modelBuilder.Entity("MovieAPI.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MovieAPI.Models.User", b =>
                {
                    b.Navigation("MoviesRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
