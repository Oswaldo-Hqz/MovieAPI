// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAPI.Data;

#nullable disable

namespace MovieAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230406194630_moviecategorySeeds")]
    partial class moviecategorySeeds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("CategoryMovie");

                    b.HasData(
                        new
                        {
                            CategoriesId = 1,
                            MoviesId = 1
                        },
                        new
                        {
                            CategoriesId = 4,
                            MoviesId = 1
                        },
                        new
                        {
                            CategoriesId = 7,
                            MoviesId = 1
                        },
                        new
                        {
                            CategoriesId = 1,
                            MoviesId = 2
                        },
                        new
                        {
                            CategoriesId = 13,
                            MoviesId = 2
                        },
                        new
                        {
                            CategoriesId = 6,
                            MoviesId = 3
                        },
                        new
                        {
                            CategoriesId = 14,
                            MoviesId = 3
                        },
                        new
                        {
                            CategoriesId = 1,
                            MoviesId = 3
                        },
                        new
                        {
                            CategoriesId = 7,
                            MoviesId = 4
                        },
                        new
                        {
                            CategoriesId = 1,
                            MoviesId = 4
                        },
                        new
                        {
                            CategoriesId = 6,
                            MoviesId = 5
                        },
                        new
                        {
                            CategoriesId = 1,
                            MoviesId = 6
                        },
                        new
                        {
                            CategoriesId = 2,
                            MoviesId = 6
                        },
                        new
                        {
                            CategoriesId = 4,
                            MoviesId = 6
                        },
                        new
                        {
                            CategoriesId = 7,
                            MoviesId = 6
                        },
                        new
                        {
                            CategoriesId = 4,
                            MoviesId = 7
                        },
                        new
                        {
                            CategoriesId = 6,
                            MoviesId = 7
                        },
                        new
                        {
                            CategoriesId = 9,
                            MoviesId = 7
                        },
                        new
                        {
                            CategoriesId = 10,
                            MoviesId = 7
                        },
                        new
                        {
                            CategoriesId = 2,
                            MoviesId = 8
                        },
                        new
                        {
                            CategoriesId = 6,
                            MoviesId = 8
                        },
                        new
                        {
                            CategoriesId = 7,
                            MoviesId = 8
                        },
                        new
                        {
                            CategoriesId = 1,
                            MoviesId = 9
                        },
                        new
                        {
                            CategoriesId = 4,
                            MoviesId = 9
                        },
                        new
                        {
                            CategoriesId = 6,
                            MoviesId = 9
                        },
                        new
                        {
                            CategoriesId = 7,
                            MoviesId = 9
                        },
                        new
                        {
                            CategoriesId = 10,
                            MoviesId = 9
                        },
                        new
                        {
                            CategoriesId = 1,
                            MoviesId = 10
                        },
                        new
                        {
                            CategoriesId = 6,
                            MoviesId = 10
                        },
                        new
                        {
                            CategoriesId = 3,
                            MoviesId = 10
                        });
                });

            modelBuilder.Entity("MovieAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8461),
                            CreatedUserId = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8463),
                            CreatedUserId = 1,
                            Name = "Animation"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8464),
                            CreatedUserId = 1,
                            Name = "Crimen"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8466),
                            CreatedUserId = 1,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8467),
                            CreatedUserId = 1,
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8469),
                            CreatedUserId = 1,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8470),
                            CreatedUserId = 1,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8472),
                            CreatedUserId = 1,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8473),
                            CreatedUserId = 1,
                            Name = "Musical"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8475),
                            CreatedUserId = 1,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8477),
                            CreatedUserId = 1,
                            Name = "Scary"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8478),
                            CreatedUserId = 1,
                            Name = "Science fiction"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8480),
                            CreatedUserId = 1,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8481),
                            CreatedUserId = 1,
                            Name = "War"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8483),
                            CreatedUserId = 1,
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("MovieAPI.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Synopsis")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8526),
                            CreatedUserId = 1,
                            MovieName = "Everything Everywhere All at Once",
                            ReleaseYear = 2022,
                            Synopsis = "An aging Chinese immigrant is swept up in an insane adventure, where she alone can save what's important to her by connecting with the lives she could have led in other universes."
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8529),
                            CreatedUserId = 1,
                            MovieName = "John Wick",
                            ReleaseYear = 2014,
                            Synopsis = "Ex-hitman John Wick comes out of retirement to track down the gangsters that took everything from him."
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8531),
                            CreatedUserId = 1,
                            MovieName = "All Quiet on the Western Front",
                            ReleaseYear = 2022,
                            Synopsis = "Full of excitement and patriotic fervour, the boys enthusiastically march into a war they believe in. But once on the Western Front, they discover the soul-destroying horror of World War I."
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8534),
                            CreatedUserId = 1,
                            MovieName = "Harry Potter and the Philosopher's Stone",
                            ReleaseYear = 2001,
                            Synopsis = "Harry Potter has lived under the stairs at his aunt and uncle's house his whole life. But on his 11th birthday, he learns he's a powerful wizard—with a place waiting for him at the Hogwarts School of Witchcraft and Wizardry."
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8536),
                            CreatedUserId = 1,
                            MovieName = "Citizen Kane",
                            ReleaseYear = 1941,
                            Synopsis = "Newspaper magnate, Charles Foster Kane is taken from his mother as a boy and made the ward of a rich industrialist. As a result, every well-meaning, tyrannical or self-destructive move he makes for the rest of his life appears in some way to be a reaction to that deeply wounding event."
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8538),
                            CreatedUserId = 1,
                            MovieName = "Spider-Man: Into the Spider-Verse",
                            ReleaseYear = 2018,
                            Synopsis = "Miles Morales is juggling his life between being a high school student and being Spider-Man. However, when Wilson \"Kingpin\" Fisk uses a super collider, another Spider-Man from another dimension, Peter Parker, accidentally winds up in Miles' dimension."
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8541),
                            CreatedUserId = 1,
                            MovieName = "La La Land",
                            ReleaseYear = 2016,
                            Synopsis = "Mia, an aspiring actress, serves lattes to movie stars in between auditions and Sebastian, a jazz musician, scrapes by playing cocktail party gigs in dingy bars, but as success mounts they are faced with decisions that begin to fray the fragile fabric of their love affair, and the dreams they worked so hard to maintain in each other threaten to rip them apart."
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8543),
                            CreatedUserId = 1,
                            MovieName = "Guillermo del Toro's Pinocchio",
                            ReleaseYear = 2022,
                            Synopsis = "During the rise of fascism in Mussolini's Italy, a wooden boy brought magically to life struggles to live up to his father's expectations."
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8545),
                            CreatedUserId = 1,
                            MovieName = "The Secret Life of Walter Mitty",
                            ReleaseYear = 2013,
                            Synopsis = "A timid magazine photo manager who lives life vicariously through daydreams embarks on a true-life adventure when a negative goes missing."
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8547),
                            CreatedUserId = 1,
                            MovieName = "Kill Bill: Vol. 1",
                            ReleaseYear = 2003,
                            Synopsis = "An assassin is shot by her ruthless employer, Bill, and other members of their assassination circle – but she lives to plot her vengeance."
                        });
                });

            modelBuilder.Entity("MovieAPI.Models.MovieRating", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MoviesRating");
                });

            modelBuilder.Entity("MovieAPI.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(7715),
                            CreatedUserId = 1,
                            Name = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(7718),
                            CreatedUserId = 1,
                            Name = "user"
                        });
                });

            modelBuilder.Entity("MovieAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8319),
                            Email = "admin@ravn.com",
                            FirstName = "El",
                            LastName = "Admin",
                            PasswordHash = new byte[] { 148, 46, 145, 36, 88, 17, 91, 178, 110, 69, 186, 12, 188, 97, 8, 3, 1, 31, 197, 198, 244, 174, 56, 236, 144, 101, 222, 136, 252, 91, 39, 34, 190, 37, 45, 89, 218, 199, 197, 74, 174, 104, 210, 67, 32, 77, 156, 120, 65, 95, 113, 71, 132, 110, 5, 151, 224, 239, 10, 147, 3, 176, 165, 185 },
                            PasswordSalt = new byte[] { 151, 206, 75, 119, 206, 252, 183, 102, 240, 116, 76, 114, 10, 8, 127, 197, 134, 98, 147, 226, 188, 161, 226, 122, 177, 46, 140, 228, 57, 24, 158, 0, 54, 208, 227, 230, 186, 54, 96, 97, 27, 43, 167, 92, 32, 35, 12, 19, 253, 157, 205, 74, 57, 199, 79, 66, 65, 204, 149, 7, 16, 219, 74, 145, 132, 153, 139, 227, 186, 183, 115, 75, 112, 225, 73, 135, 84, 127, 239, 105, 36, 77, 108, 254, 150, 165, 37, 93, 243, 102, 243, 255, 157, 209, 11, 14, 9, 183, 254, 0, 253, 222, 181, 145, 68, 30, 118, 65, 120, 95, 244, 60, 90, 155, 228, 1, 236, 191, 143, 243, 100, 65, 36, 144, 168, 230, 127, 149 },
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2023, 4, 6, 19, 46, 29, 614, DateTimeKind.Utc).AddTicks(8402),
                            Email = "userDavid@ravn.com",
                            FirstName = "David",
                            LastName = "Peres",
                            PasswordHash = new byte[] { 131, 158, 192, 233, 66, 52, 139, 248, 7, 214, 86, 65, 231, 101, 84, 48, 143, 22, 145, 201, 42, 20, 174, 58, 55, 18, 112, 206, 168, 46, 137, 30, 64, 149, 191, 212, 22, 5, 228, 214, 116, 40, 49, 186, 90, 118, 27, 254, 38, 87, 18, 26, 174, 72, 239, 0, 39, 66, 156, 101, 112, 246, 112, 168 },
                            PasswordSalt = new byte[] { 44, 202, 73, 100, 238, 44, 0, 60, 234, 194, 43, 171, 67, 56, 60, 180, 97, 66, 44, 23, 230, 173, 96, 167, 162, 190, 41, 103, 185, 88, 125, 38, 111, 31, 164, 62, 200, 251, 5, 137, 161, 165, 209, 221, 29, 73, 54, 170, 245, 153, 216, 123, 86, 0, 56, 235, 3, 73, 190, 128, 224, 29, 5, 95, 109, 97, 0, 24, 143, 249, 29, 17, 117, 130, 176, 255, 72, 119, 32, 80, 231, 204, 187, 176, 241, 114, 49, 211, 182, 156, 34, 163, 206, 182, 235, 75, 8, 42, 255, 22, 132, 247, 218, 229, 66, 237, 102, 153, 90, 24, 250, 220, 109, 20, 97, 105, 242, 249, 244, 128, 102, 62, 208, 255, 59, 245, 70, 127 },
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("CategoryMovie", b =>
                {
                    b.HasOne("MovieAPI.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAPI.Models.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieAPI.Models.MovieRating", b =>
                {
                    b.HasOne("MovieAPI.Models.Movie", "Movie")
                        .WithMany("MoviesRatings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAPI.Models.User", "User")
                        .WithMany("MoviesRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MovieAPI.Models.User", b =>
                {
                    b.HasOne("MovieAPI.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MovieAPI.Models.Movie", b =>
                {
                    b.Navigation("MoviesRatings");
                });

            modelBuilder.Entity("MovieAPI.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MovieAPI.Models.User", b =>
                {
                    b.Navigation("MoviesRatings");
                });
#pragma warning restore 612, 618
        }
    }
}
